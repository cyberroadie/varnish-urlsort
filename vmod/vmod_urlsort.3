.\" Man page generated from reStructeredText.
.
.TH VMOD_URLSORT 3 "2011-05-26" "1.0" ""
.SH NAME
vmod_urlsort \- Varnish URLSORT Module
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
import urlsort;
.SH DESCRIPTION
.sp
This module lets you orders the query parameters of an URL. 
.sp
In Varnish the URL is the key to caching. 
If it recognises a previously requested URL it will look if it is available in its cache and deliver this back.  
There is a small problem with URLs which have parameters. Take a look at the following queries: 
.sp
http://localhost/test?ddd=444&bbb=222&ccc=333&aaa=111
.sp
http://localhost/test?ccc=333&aaa=111&ddd=444&bbb=222
.sp
http://localhost/test?bbb=222&ccc=333&ddd=444&aaa=111
.sp
Each of them will return the same result, the parameters are the same, only the order is different.  
Varnish treats each of them as a different query and will, in this case, 
do three separate requests to the backend and cache all of them.
.sp
With this module the three URLs above will all be rewritten with their parameters ordered like this:
.sp
http://localhost/test?aaa=111&bbb=222&ccc=333&ddd=444
.SH FUNCTIONS
.SS sortquery
.INDENT 0.0
.TP
.B Prototype
.sp
.nf
.ft C
sortquery(STRING S)
.ft P
.fi
.TP
.B Return value
STRING
.TP
.B Description
Returns URL with query parameters ordered alphabetically 
.TP
.B Example
.sp
.nf
.ft C
set req.url = urlsort.sortquery(req.url);
.ft P
.fi
.UNINDENT
.SH INSTALLATION
.sp
Usage:
.sp
.nf
.ft C
\&./configure VARNISHSRC=DIR [VMODDIR=DIR]
.ft P
.fi
.sp
\fIVARNISHSRC\fP is the directory of the Varnish source tree for which to
compile your vmod. Both the \fIVARNISHSRC\fP and \fIVARNISHSRC/include\fP
will be added to the include search paths for your module.
.sp
Optionally you can also set the vmod install directory by adding
\fIVMODDIR=DIR\fP (defaults to the pkg\-config discovered directory from your
Varnish installation).
.sp
Make targets:
.INDENT 0.0
.IP \(bu 2
make \- builds the vmod
.IP \(bu 2
make install \- installs your vmod in \fIVMODDIR\fP
.IP \(bu 2
make check \- runs the unit tests in \fBsrc/tests/*.vtc\fP
.UNINDENT
.sp
In your VCL you could then use this vmod along the following lines:
.sp
.nf
.ft C
import urlsort;

sub vcl_recv {
  set req.url = urlsort.sortquery(req.url);
}
.ft P
.fi
.SH HISTORY
.sp
This manual page was released as part of the libvmod\-example package,
demonstrating how to create an out\-of\-tree Varnish vmod.
.SH COPYRIGHT
.sp
This document is licensed under the FreeBSD license. See LICENSE for details.
.INDENT 0.0
.IP \(bu 2
Copyright (c) 2011 
.UNINDENT
.SH AUTHOR
Olivier Van Acker
.\" Generated by docutils manpage writer.
.\" 
.
